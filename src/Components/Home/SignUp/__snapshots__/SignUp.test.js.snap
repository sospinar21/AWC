// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`login matches snapshot 1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <Login
    addUser={[Function]}
    suggestedEvents={
        Array [
            Object {
              "name": "party",
            },
          ]
    }
    user={
        Object {
            "namename": "Steph",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Login {
      "_reactInternalFiber": FiberNode {
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "addUser": [Function],
              "suggestedEvents": Array [
                Object {
                  "name": "party",
                },
              ],
              "user": Object {
                "namename": "Steph",
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "addUser": [Function],
              "suggestedEvents": Array [
                Object {
                  "name": "party",
                },
              ],
              "user": Object {
                "namename": "Steph",
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "addUser": [Function],
              "suggestedEvents": Array [
                Object {
                  "name": "party",
                },
              ],
              "user": Object {
                "namename": "Steph",
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="si-su"
                  >
                                    <div
                                                      class="signin-form"
                                    >
                                                      <h3>
                                                                        LOGIN
                                                      </h3>
                                                      <div
                                                                        class="logo"
                                                      >
                                                                        <div
                                                                                          class="logocir"
                                                                        >
                                                                                          AWC
                                                                        </div>
                                                      </div>
                                                      <h4
                                                                        class="success"
                                                      />
                                                      <h4
                                                                        class="incorrect"
                                                      />
                                                      <form
                                                                        class="login-form"
                                                                        autocomplete="on"
                                                      >
                                                                        <input
                                                                                          name="email"
                                                                                          type="email"
                                                                                          autocomplete="on"
                                                                                          placeholder="Email"
                                                                                          class="email-si"
                                                                                          value=""
                                                                        />
                                                                        <input
                                                                                          name="password"
                                                                                          autocomplete="on"
                                                                                          type="password"
                                                                                          placeholder="Password"
                                                                                          class="password-si"
                                                                                          value=""
                                                                        />
                                                                        <button
                                                                                          disabled=""
                                                                                          class="login"
                                                                        >
                                                                                          Log In
                                                                        </button>
                                                      </form>
                                    </div>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "addUser": [Function],
                                                                  "suggestedEvents": Array [
                                                                    Object {
                                                                      "name": "party",
                                                                    },
                                                                  ],
                                                                  "user": Object {
                                                                    "namename": "Steph",
                                                                  },
                                                                }
                      }
/>,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "addUser": [Function],
                                                                  "suggestedEvents": Array [
                                                                    Object {
                                                                      "name": "party",
                                                                    },
                                                                  ],
                                                                  "user": Object {
                                                                    "namename": "Steph",
                                                                  },
                                                                }
                      }
/>,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "addUser": [Function],
                                                "suggestedEvents": Array [
                                                  Object {
                                                    "name": "party",
                                                  },
                                                ],
                                                "user": Object {
                                                  "namename": "Steph",
                                                },
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                                class="si-su"
                >
                                <div
                                                class="signin-form"
                                >
                                                <h3>
                                                                LOGIN
                                                </h3>
                                                <div
                                                                class="logo"
                                                >
                                                                <div
                                                                                class="logocir"
                                                                >
                                                                                AWC
                                                                </div>
                                                </div>
                                                <h4
                                                                class="success"
                                                />
                                                <h4
                                                                class="incorrect"
                                                />
                                                <form
                                                                class="login-form"
                                                                autocomplete="on"
                                                >
                                                                <input
                                                                                name="email"
                                                                                type="email"
                                                                                autocomplete="on"
                                                                                placeholder="Email"
                                                                                class="email-si"
                                                                                value=""
                                                                />
                                                                <input
                                                                                name="password"
                                                                                autocomplete="on"
                                                                                type="password"
                                                                                placeholder="Password"
                                                                                class="password-si"
                                                                                value=""
                                                                />
                                                                <button
                                                                                disabled=""
                                                                                class="login"
                                                                >
                                                                                Log In
                                                                </button>
                                                </form>
                                </div>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "addUser": [Function],
                                                      "suggestedEvents": Array [
                                                        Object {
                                                          "name": "party",
                                                        },
                                                      ],
                                                      "user": Object {
                                                        "namename": "Steph",
                                                      },
                                                    }
                  }
/>,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": Object {
            "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
            "lineNumber": 74,
          },
          "alternate": null,
          "child": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
              "lineNumber": 75,
            },
            "alternate": null,
            "child": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                "lineNumber": 76,
              },
              "alternate": null,
              "child": null,
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": "LOGIN",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": "LOGIN",
              },
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                  "lineNumber": 77,
                },
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 13,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                    "lineNumber": 78,
                  },
                  "alternate": null,
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "AWC",
                    "className": "logocir",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "AWC",
                    "className": "logocir",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <div
                    class="logocir"
>
                    AWC
</div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <div
                    className="logocir"
>
                    AWC
</div>,
                  "className": "logo",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <div
                    className="logocir"
>
                    AWC
</div>,
                  "className": "logo",
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                    "lineNumber": 80,
                  },
                  "alternate": null,
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 2,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "className": "success",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "className": "success",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 11,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                      "lineNumber": 81,
                    },
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 3,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "incorrect",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "incorrect",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                        "lineNumber": 82,
                      },
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                          "lineNumber": 83,
                        },
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "autoComplete": "on",
                          "className": "email-si",
                          "name": "email",
                          "onChange": [Function],
                          "placeholder": "Email",
                          "type": "email",
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "autoComplete": "on",
                          "className": "email-si",
                          "name": "email",
                          "onChange": [Function],
                          "placeholder": "Email",
                          "type": "email",
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 15,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                            "lineNumber": 91,
                          },
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "autoComplete": "on",
                            "className": "password-si",
                            "name": "password",
                            "onChange": [Function],
                            "placeholder": "Password",
                            "type": "password",
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "autoComplete": "on",
                            "className": "password-si",
                            "name": "password",
                            "onChange": [Function],
                            "placeholder": "Password",
                            "type": "password",
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 16,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                              "lineNumber": 99,
                            },
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Log In",
                              "className": "login",
                              "disabled": true,
                              "onClick": [Function],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Log In",
                              "className": "login",
                              "disabled": true,
                              "onClick": [Function],
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <button
                              disabled=""
                              class="login"
>
                              Log In
</button>,
                            "tag": 5,
                            "type": "button",
                            "updateQueue": null,
                          },
                          "stateNode": <input
                            name="password"
                            autocomplete="on"
                            type="password"
                            placeholder="Password"
                            class="password-si"
                            value=""
/>,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": <input
                          name="email"
                          type="email"
                          autocomplete="on"
                          placeholder="Email"
                          class="email-si"
                          value=""
/>,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 4,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "autoComplete": "on",
                        "children": Array [
                          <input
                            autoComplete="on"
                            className="email-si"
                            name="email"
                            onChange={[Function]}
                            placeholder="Email"
                            type="email"
                            value=""
/>,
                          <input
                            autoComplete="on"
                            className="password-si"
                            name="password"
                            onChange={[Function]}
                            placeholder="Password"
                            type="password"
                            value=""
/>,
                          <button
                            className="login"
                            disabled={true}
                            onClick={[Function]}
>
                            Log In
</button>,
                        ],
                        "className": "login-form",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "autoComplete": "on",
                        "children": Array [
                          <input
                            autoComplete="on"
                            className="email-si"
                            name="email"
                            onChange={[Function]}
                            placeholder="Email"
                            type="email"
                            value=""
/>,
                          <input
                            autoComplete="on"
                            className="password-si"
                            name="password"
                            onChange={[Function]}
                            placeholder="Password"
                            type="password"
                            value=""
/>,
                          <button
                            className="login"
                            disabled={true}
                            onClick={[Function]}
>
                            Log In
</button>,
                        ],
                        "className": "login-form",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <form
                        class="login-form"
                        autocomplete="on"
>
                        <input
                                                name="email"
                                                type="email"
                                                autocomplete="on"
                                                placeholder="Email"
                                                class="email-si"
                                                value=""
                        />
                        <input
                                                name="password"
                                                autocomplete="on"
                                                type="password"
                                                placeholder="Password"
                                                class="password-si"
                                                value=""
                        />
                        <button
                                                disabled=""
                                                class="login"
                        >
                                                Log In
                        </button>
</form>,
                      "tag": 5,
                      "type": "form",
                      "updateQueue": null,
                    },
                    "stateNode": <h4
                      class="incorrect"
/>,
                    "tag": 5,
                    "type": "h4",
                    "updateQueue": null,
                  },
                  "stateNode": <h4
                    class="success"
/>,
                  "tag": 5,
                  "type": "h4",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="logo"
>
                  <div
                                    class="logocir"
                  >
                                    AWC
                  </div>
</div>,
                "tag": 5,
                "type": "div",
                "updateQueue": null,
              },
              "stateNode": <h3>
                LOGIN
</h3>,
              "tag": 5,
              "type": "h3",
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <h3>
                  LOGIN
</h3>,
                <div
                  className="logo"
>
                  <div
                                    className="logocir"
                  >
                                    AWC
                  </div>
</div>,
                <h4
                  className="success"
/>,
                <h4
                  className="incorrect"
/>,
                <form
                  autoComplete="on"
                  className="login-form"
>
                  <input
                                    autoComplete="on"
                                    className="email-si"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Email"
                                    type="email"
                                    value=""
                  />
                  <input
                                    autoComplete="on"
                                    className="password-si"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                  />
                  <button
                                    className="login"
                                    disabled={true}
                                    onClick={[Function]}
                  >
                                    Log In
                  </button>
</form>,
              ],
              "className": "signin-form",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <h3>
                  LOGIN
</h3>,
                <div
                  className="logo"
>
                  <div
                                    className="logocir"
                  >
                                    AWC
                  </div>
</div>,
                <h4
                  className="success"
/>,
                <h4
                  className="incorrect"
/>,
                <form
                  autoComplete="on"
                  className="login-form"
>
                  <input
                                    autoComplete="on"
                                    className="email-si"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Email"
                                    type="email"
                                    value=""
                  />
                  <input
                                    autoComplete="on"
                                    className="password-si"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                  />
                  <button
                                    className="login"
                                    disabled={true}
                                    onClick={[Function]}
                  >
                                    Log In
                  </button>
</form>,
              ],
              "className": "signin-form",
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": <div
              class="signin-form"
>
              <h3>
                            LOGIN
              </h3>
              <div
                            class="logo"
              >
                            <div
                                          class="logocir"
                            >
                                          AWC
                            </div>
              </div>
              <h4
                            class="success"
              />
              <h4
                            class="incorrect"
              />
              <form
                            class="login-form"
                            autocomplete="on"
              >
                            <input
                                          name="email"
                                          type="email"
                                          autocomplete="on"
                                          placeholder="Email"
                                          class="email-si"
                                          value=""
                            />
                            <input
                                          name="password"
                                          autocomplete="on"
                                          type="password"
                                          placeholder="Password"
                                          class="password-si"
                                          value=""
                            />
                            <button
                                          disabled=""
                                          class="login"
                            >
                                          Log In
                            </button>
              </form>
</div>,
            "tag": 5,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 0,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <div
              className="signin-form"
>
              <h3>
                            LOGIN
              </h3>
              <div
                            className="logo"
              >
                            <div
                                          className="logocir"
                            >
                                          AWC
                            </div>
              </div>
              <h4
                            className="success"
              />
              <h4
                            className="incorrect"
              />
              <form
                            autoComplete="on"
                            className="login-form"
              >
                            <input
                                          autoComplete="on"
                                          className="email-si"
                                          name="email"
                                          onChange={[Function]}
                                          placeholder="Email"
                                          type="email"
                                          value=""
                            />
                            <input
                                          autoComplete="on"
                                          className="password-si"
                                          name="password"
                                          onChange={[Function]}
                                          placeholder="Password"
                                          type="password"
                                          value=""
                            />
                            <button
                                          className="login"
                                          disabled={true}
                                          onClick={[Function]}
                            >
                                          Log In
                            </button>
              </form>
</div>,
            "className": "si-su",
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <div
              className="signin-form"
>
              <h3>
                            LOGIN
              </h3>
              <div
                            className="logo"
              >
                            <div
                                          className="logocir"
                            >
                                          AWC
                            </div>
              </div>
              <h4
                            className="success"
              />
              <h4
                            className="incorrect"
              />
              <form
                            autoComplete="on"
                            className="login-form"
              >
                            <input
                                          autoComplete="on"
                                          className="email-si"
                                          name="email"
                                          onChange={[Function]}
                                          placeholder="Email"
                                          type="email"
                                          value=""
                            />
                            <input
                                          autoComplete="on"
                                          className="password-si"
                                          name="password"
                                          onChange={[Function]}
                                          placeholder="Password"
                                          type="password"
                                          value=""
                            />
                            <button
                                          className="login"
                                          disabled={true}
                                          onClick={[Function]}
                            >
                                          Log In
                            </button>
              </form>
</div>,
            "className": "si-su",
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": <div
            class="si-su"
>
            <div
                        class="signin-form"
            >
                        <h3>
                                    LOGIN
                        </h3>
                        <div
                                    class="logo"
                        >
                                    <div
                                                class="logocir"
                                    >
                                                AWC
                                    </div>
                        </div>
                        <h4
                                    class="success"
                        />
                        <h4
                                    class="incorrect"
                        />
                        <form
                                    class="login-form"
                                    autocomplete="on"
                        >
                                    <input
                                                name="email"
                                                type="email"
                                                autocomplete="on"
                                                placeholder="Email"
                                                class="email-si"
                                                value=""
                                    />
                                    <input
                                                name="password"
                                                autocomplete="on"
                                                type="password"
                                                placeholder="Password"
                                                class="password-si"
                                                value=""
                                    />
                                    <button
                                                disabled=""
                                                class="login"
                                    >
                                                Log In
                                    </button>
                        </form>
            </div>
</div>,
          "tag": 5,
          "type": "div",
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "addUser": [Function],
          "suggestedEvents": Array [
            Object {
              "name": "party",
            },
          ],
          "user": Object {
            "namename": "Steph",
          },
        },
        "memoizedState": Object {
          "email": "",
          "login": false,
          "password": "",
        },
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "addUser": [Function],
          "suggestedEvents": Array [
            Object {
              "name": "party",
            },
          ],
          "user": Object {
            "namename": "Steph",
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "addUser": [Function],
              "suggestedEvents": Array [
                Object {
                  "name": "party",
                },
              ],
              "user": Object {
                "namename": "Steph",
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "addUser": [Function],
              "suggestedEvents": Array [
                Object {
                  "name": "party",
                },
              ],
              "user": Object {
                "namename": "Steph",
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "addUser": [Function],
              "suggestedEvents": Array [
                Object {
                  "name": "party",
                },
              ],
              "user": Object {
                "namename": "Steph",
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="si-su"
                  >
                                    <div
                                                      class="signin-form"
                                    >
                                                      <h3>
                                                                        LOGIN
                                                      </h3>
                                                      <div
                                                                        class="logo"
                                                      >
                                                                        <div
                                                                                          class="logocir"
                                                                        >
                                                                                          AWC
                                                                        </div>
                                                      </div>
                                                      <h4
                                                                        class="success"
                                                      />
                                                      <h4
                                                                        class="incorrect"
                                                      />
                                                      <form
                                                                        class="login-form"
                                                                        autocomplete="on"
                                                      >
                                                                        <input
                                                                                          name="email"
                                                                                          type="email"
                                                                                          autocomplete="on"
                                                                                          placeholder="Email"
                                                                                          class="email-si"
                                                                                          value=""
                                                                        />
                                                                        <input
                                                                                          name="password"
                                                                                          autocomplete="on"
                                                                                          type="password"
                                                                                          placeholder="Password"
                                                                                          class="password-si"
                                                                                          value=""
                                                                        />
                                                                        <button
                                                                                          disabled=""
                                                                                          class="login"
                                                                        >
                                                                                          Log In
                                                                        </button>
                                                      </form>
                                    </div>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "addUser": [Function],
                                                                  "suggestedEvents": Array [
                                                                    Object {
                                                                      "name": "party",
                                                                    },
                                                                  ],
                                                                  "user": Object {
                                                                    "namename": "Steph",
                                                                  },
                                                                }
                      }
/>,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "addUser": [Function],
                                                                  "suggestedEvents": Array [
                                                                    Object {
                                                                      "name": "party",
                                                                    },
                                                                  ],
                                                                  "user": Object {
                                                                    "namename": "Steph",
                                                                  },
                                                                }
                      }
/>,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "addUser": [Function],
                                                "suggestedEvents": Array [
                                                  Object {
                                                    "name": "party",
                                                  },
                                                ],
                                                "user": Object {
                                                  "namename": "Steph",
                                                },
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                                class="si-su"
                >
                                <div
                                                class="signin-form"
                                >
                                                <h3>
                                                                LOGIN
                                                </h3>
                                                <div
                                                                class="logo"
                                                >
                                                                <div
                                                                                class="logocir"
                                                                >
                                                                                AWC
                                                                </div>
                                                </div>
                                                <h4
                                                                class="success"
                                                />
                                                <h4
                                                                class="incorrect"
                                                />
                                                <form
                                                                class="login-form"
                                                                autocomplete="on"
                                                >
                                                                <input
                                                                                name="email"
                                                                                type="email"
                                                                                autocomplete="on"
                                                                                placeholder="Email"
                                                                                class="email-si"
                                                                                value=""
                                                                />
                                                                <input
                                                                                name="password"
                                                                                autocomplete="on"
                                                                                type="password"
                                                                                placeholder="Password"
                                                                                class="password-si"
                                                                                value=""
                                                                />
                                                                <button
                                                                                disabled=""
                                                                                class="login"
                                                                >
                                                                                Log In
                                                                </button>
                                                </form>
                                </div>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "addUser": [Function],
                                                      "suggestedEvents": Array [
                                                        Object {
                                                          "name": "party",
                                                        },
                                                      ],
                                                      "user": Object {
                                                        "namename": "Steph",
                                                      },
                                                    }
                  }
/>,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "getToken": [Function],
      "giveAccess": [Function],
      "handleInputChange": [Function],
      "props": Object {
        "addUser": [Function],
        "suggestedEvents": Array [
          Object {
            "name": "party",
          },
        ],
        "user": Object {
          "namename": "Steph",
        },
      },
      "refs": Object {},
      "state": Object {
        "email": "",
        "login": false,
        "password": "",
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
      "userSignIn": [Function],
      "validateEmail": [Function],
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "addUser": [Function],
      "suggestedEvents": Array [
        Object {
          "name": "party",
        },
      ],
      "user": Object {
        "namename": "Steph",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="si-su"
>
        <div
                class="signin-form"
        >
                <h3>
                        LOGIN
                </h3>
                <div
                        class="logo"
                >
                        <div
                                class="logocir"
                        >
                                AWC
                        </div>
                </div>
                <h4
                        class="success"
                />
                <h4
                        class="incorrect"
                />
                <form
                        class="login-form"
                        autocomplete="on"
                >
                        <input
                                name="email"
                                type="email"
                                autocomplete="on"
                                placeholder="Email"
                                class="email-si"
                                value=""
                        />
                        <input
                                name="password"
                                autocomplete="on"
                                type="password"
                                placeholder="Password"
                                class="password-si"
                                value=""
                        />
                        <button
                                disabled=""
                                class="login"
                        >
                                Log In
                        </button>
                </form>
        </div>
</div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="signin-form"
>
          <h3>
                    LOGIN
          </h3>
          <div
                    className="logo"
          >
                    <div
                              className="logocir"
                    >
                              AWC
                    </div>
          </div>
          <h4
                    className="success"
          />
          <h4
                    className="incorrect"
          />
          <form
                    autoComplete="on"
                    className="login-form"
          >
                    <input
                              autoComplete="on"
                              className="email-si"
                              name="email"
                              onChange={[Function]}
                              placeholder="Email"
                              type="email"
                              value=""
                    />
                    <input
                              autoComplete="on"
                              className="password-si"
                              name="password"
                              onChange={[Function]}
                              placeholder="Password"
                              type="password"
                              value=""
                    />
                    <button
                              className="login"
                              disabled={true}
                              onClick={[Function]}
                    >
                              Log In
                    </button>
          </form>
</div>,
        "className": "si-su",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <div
            class="signin-form"
>
            <h3>
                        LOGIN
            </h3>
            <div
                        class="logo"
            >
                        <div
                                    class="logocir"
                        >
                                    AWC
                        </div>
            </div>
            <h4
                        class="success"
            />
            <h4
                        class="incorrect"
            />
            <form
                        class="login-form"
                        autocomplete="on"
            >
                        <input
                                    name="email"
                                    type="email"
                                    autocomplete="on"
                                    placeholder="Email"
                                    class="email-si"
                                    value=""
                        />
                        <input
                                    name="password"
                                    autocomplete="on"
                                    type="password"
                                    placeholder="Password"
                                    class="password-si"
                                    value=""
                        />
                        <button
                                    disabled=""
                                    class="login"
                        >
                                    Log In
                        </button>
            </form>
</div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h3>
                LOGIN
</h3>,
              <div
                className="logo"
>
                <div
                                className="logocir"
                >
                                AWC
                </div>
</div>,
              <h4
                className="success"
/>,
              <h4
                className="incorrect"
/>,
              <form
                autoComplete="on"
                className="login-form"
>
                <input
                                autoComplete="on"
                                className="email-si"
                                name="email"
                                onChange={[Function]}
                                placeholder="Email"
                                type="email"
                                value=""
                />
                <input
                                autoComplete="on"
                                className="password-si"
                                name="password"
                                onChange={[Function]}
                                placeholder="Password"
                                type="password"
                                value=""
                />
                <button
                                className="login"
                                disabled={true}
                                onClick={[Function]}
                >
                                Log In
                </button>
</form>,
            ],
            "className": "signin-form",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <h3>
                LOGIN
</h3>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "LOGIN",
              },
              "ref": null,
              "rendered": Array [
                "LOGIN",
              ],
              "type": "h3",
            },
            Object {
              "instance": <div
                class="logo"
>
                <div
                                class="logocir"
                >
                                AWC
                </div>
</div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="logocir"
>
                  AWC
</div>,
                "className": "logo",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="logocir"
>
                    AWC
</div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "AWC",
                    "className": "logocir",
                  },
                  "ref": null,
                  "rendered": Array [
                    "AWC",
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <h4
                class="success"
/>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "success",
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "h4",
            },
            Object {
              "instance": <h4
                class="incorrect"
/>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "incorrect",
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "h4",
            },
            Object {
              "instance": <form
                class="login-form"
                autocomplete="on"
>
                <input
                                name="email"
                                type="email"
                                autocomplete="on"
                                placeholder="Email"
                                class="email-si"
                                value=""
                />
                <input
                                name="password"
                                autocomplete="on"
                                type="password"
                                placeholder="Password"
                                class="password-si"
                                value=""
                />
                <button
                                disabled=""
                                class="login"
                >
                                Log In
                </button>
</form>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "autoComplete": "on",
                "children": Array [
                  <input
                    autoComplete="on"
                    className="email-si"
                    name="email"
                    onChange={[Function]}
                    placeholder="Email"
                    type="email"
                    value=""
/>,
                  <input
                    autoComplete="on"
                    className="password-si"
                    name="password"
                    onChange={[Function]}
                    placeholder="Password"
                    type="password"
                    value=""
/>,
                  <button
                    className="login"
                    disabled={true}
                    onClick={[Function]}
>
                    Log In
</button>,
                ],
                "className": "login-form",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <input
                    name="email"
                    type="email"
                    autocomplete="on"
                    placeholder="Email"
                    class="email-si"
                    value=""
/>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "autoComplete": "on",
                    "className": "email-si",
                    "name": "email",
                    "onChange": [Function],
                    "placeholder": "Email",
                    "type": "email",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
                Object {
                  "instance": <input
                    name="password"
                    autocomplete="on"
                    type="password"
                    placeholder="Password"
                    class="password-si"
                    value=""
/>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "autoComplete": "on",
                    "className": "password-si",
                    "name": "password",
                    "onChange": [Function],
                    "placeholder": "Password",
                    "type": "password",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
                Object {
                  "instance": <button
                    disabled=""
                    class="login"
>
                    Log In
</button>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Log In",
                    "className": "login",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    "Log In",
                  ],
                  "type": "button",
                },
              ],
              "type": "form",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Login {
        "_reactInternalFiber": FiberNode {
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="si-su"
                    >
                                        <div
                                                            class="signin-form"
                                        >
                                                            <h3>
                                                                                LOGIN
                                                            </h3>
                                                            <div
                                                                                class="logo"
                                                            >
                                                                                <div
                                                                                                    class="logocir"
                                                                                >
                                                                                                    AWC
                                                                                </div>
                                                            </div>
                                                            <h4
                                                                                class="success"
                                                            />
                                                            <h4
                                                                                class="incorrect"
                                                            />
                                                            <form
                                                                                class="login-form"
                                                                                autocomplete="on"
                                                            >
                                                                                <input
                                                                                                    name="email"
                                                                                                    type="email"
                                                                                                    autocomplete="on"
                                                                                                    placeholder="Email"
                                                                                                    class="email-si"
                                                                                                    value=""
                                                                                />
                                                                                <input
                                                                                                    name="password"
                                                                                                    autocomplete="on"
                                                                                                    type="password"
                                                                                                    placeholder="Password"
                                                                                                    class="password-si"
                                                                                                    value=""
                                                                                />
                                                                                <button
                                                                                                    disabled=""
                                                                                                    class="login"
                                                                                >
                                                                                                    Log In
                                                                                </button>
                                                            </form>
                                        </div>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "addUser": [Function],
                                                                        "suggestedEvents": Array [
                                                                          Object {
                                                                            "name": "party",
                                                                          },
                                                                        ],
                                                                        "user": Object {
                                                                          "namename": "Steph",
                                                                        },
                                                                      }
                        }
/>,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "addUser": [Function],
                                                                        "suggestedEvents": Array [
                                                                          Object {
                                                                            "name": "party",
                                                                          },
                                                                        ],
                                                                        "user": Object {
                                                                          "namename": "Steph",
                                                                        },
                                                                      }
                        }
/>,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "addUser": [Function],
                                                      "suggestedEvents": Array [
                                                        Object {
                                                          "name": "party",
                                                        },
                                                      ],
                                                      "user": Object {
                                                        "namename": "Steph",
                                                      },
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="si-su"
                  >
                                    <div
                                                      class="signin-form"
                                    >
                                                      <h3>
                                                                        LOGIN
                                                      </h3>
                                                      <div
                                                                        class="logo"
                                                      >
                                                                        <div
                                                                                          class="logocir"
                                                                        >
                                                                                          AWC
                                                                        </div>
                                                      </div>
                                                      <h4
                                                                        class="success"
                                                      />
                                                      <h4
                                                                        class="incorrect"
                                                      />
                                                      <form
                                                                        class="login-form"
                                                                        autocomplete="on"
                                                      >
                                                                        <input
                                                                                          name="email"
                                                                                          type="email"
                                                                                          autocomplete="on"
                                                                                          placeholder="Email"
                                                                                          class="email-si"
                                                                                          value=""
                                                                        />
                                                                        <input
                                                                                          name="password"
                                                                                          autocomplete="on"
                                                                                          type="password"
                                                                                          placeholder="Password"
                                                                                          class="password-si"
                                                                                          value=""
                                                                        />
                                                                        <button
                                                                                          disabled=""
                                                                                          class="login"
                                                                        >
                                                                                          Log In
                                                                        </button>
                                                      </form>
                                    </div>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "addUser": [Function],
                                                            "suggestedEvents": Array [
                                                              Object {
                                                                "name": "party",
                                                              },
                                                            ],
                                                            "user": Object {
                                                              "namename": "Steph",
                                                            },
                                                          }
                    }
/>,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "addUser": [Function],
                  "suggestedEvents": Array [
                    Object {
                      "name": "party",
                    },
                  ],
                  "user": Object {
                    "namename": "Steph",
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "addUser": [Function],
                  "suggestedEvents": Array [
                    Object {
                      "name": "party",
                    },
                  ],
                  "user": Object {
                    "namename": "Steph",
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
              "lineNumber": 74,
            },
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                "lineNumber": 75,
              },
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                  "lineNumber": 76,
                },
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "LOGIN",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "LOGIN",
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                    "lineNumber": 77,
                  },
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                      "lineNumber": 78,
                    },
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "AWC",
                      "className": "logocir",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "AWC",
                      "className": "logocir",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <div
                      class="logocir"
>
                      AWC
</div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="logocir"
>
                      AWC
</div>,
                    "className": "logo",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="logocir"
>
                      AWC
</div>,
                    "className": "logo",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                      "lineNumber": 80,
                    },
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "success",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "success",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                        "lineNumber": 81,
                      },
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 3,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "incorrect",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "incorrect",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 12,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                          "lineNumber": 82,
                        },
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 14,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                            "lineNumber": 83,
                          },
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "autoComplete": "on",
                            "className": "email-si",
                            "name": "email",
                            "onChange": [Function],
                            "placeholder": "Email",
                            "type": "email",
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "autoComplete": "on",
                            "className": "email-si",
                            "name": "email",
                            "onChange": [Function],
                            "placeholder": "Email",
                            "type": "email",
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 15,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                              "lineNumber": 91,
                            },
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "autoComplete": "on",
                              "className": "password-si",
                              "name": "password",
                              "onChange": [Function],
                              "placeholder": "Password",
                              "type": "password",
                              "value": "",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "autoComplete": "on",
                              "className": "password-si",
                              "name": "password",
                              "onChange": [Function],
                              "placeholder": "Password",
                              "type": "password",
                              "value": "",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": FiberNode {
                              "_debugID": 16,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/sthefanyospina/Documents/Turing/Mod3/AWC/awc-frontend/src/Components/Home/Login/Login.js",
                                "lineNumber": 99,
                              },
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Log In",
                                "className": "login",
                                "disabled": true,
                                "onClick": [Function],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Log In",
                                "className": "login",
                                "disabled": true,
                                "onClick": [Function],
                              },
                              "ref": null,
                              "return": [Circular],
                              "sibling": null,
                              "stateNode": <button
                                disabled=""
                                class="login"
>
                                Log In
</button>,
                              "tag": 5,
                              "type": "button",
                              "updateQueue": null,
                            },
                            "stateNode": <input
                              name="password"
                              autocomplete="on"
                              type="password"
                              placeholder="Password"
                              class="password-si"
                              value=""
/>,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": <input
                            name="email"
                            type="email"
                            autocomplete="on"
                            placeholder="Email"
                            class="email-si"
                            value=""
/>,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 4,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "autoComplete": "on",
                          "children": Array [
                            <input
                              autoComplete="on"
                              className="email-si"
                              name="email"
                              onChange={[Function]}
                              placeholder="Email"
                              type="email"
                              value=""
/>,
                            <input
                              autoComplete="on"
                              className="password-si"
                              name="password"
                              onChange={[Function]}
                              placeholder="Password"
                              type="password"
                              value=""
/>,
                            <button
                              className="login"
                              disabled={true}
                              onClick={[Function]}
>
                              Log In
</button>,
                          ],
                          "className": "login-form",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "autoComplete": "on",
                          "children": Array [
                            <input
                              autoComplete="on"
                              className="email-si"
                              name="email"
                              onChange={[Function]}
                              placeholder="Email"
                              type="email"
                              value=""
/>,
                            <input
                              autoComplete="on"
                              className="password-si"
                              name="password"
                              onChange={[Function]}
                              placeholder="Password"
                              type="password"
                              value=""
/>,
                            <button
                              className="login"
                              disabled={true}
                              onClick={[Function]}
>
                              Log In
</button>,
                          ],
                          "className": "login-form",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <form
                          class="login-form"
                          autocomplete="on"
>
                          <input
                                                    name="email"
                                                    type="email"
                                                    autocomplete="on"
                                                    placeholder="Email"
                                                    class="email-si"
                                                    value=""
                          />
                          <input
                                                    name="password"
                                                    autocomplete="on"
                                                    type="password"
                                                    placeholder="Password"
                                                    class="password-si"
                                                    value=""
                          />
                          <button
                                                    disabled=""
                                                    class="login"
                          >
                                                    Log In
                          </button>
</form>,
                        "tag": 5,
                        "type": "form",
                        "updateQueue": null,
                      },
                      "stateNode": <h4
                        class="incorrect"
/>,
                      "tag": 5,
                      "type": "h4",
                      "updateQueue": null,
                    },
                    "stateNode": <h4
                      class="success"
/>,
                    "tag": 5,
                    "type": "h4",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="logo"
>
                    <div
                                        class="logocir"
                    >
                                        AWC
                    </div>
</div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <h3>
                  LOGIN
</h3>,
                "tag": 5,
                "type": "h3",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <h3>
                    LOGIN
</h3>,
                  <div
                    className="logo"
>
                    <div
                                        className="logocir"
                    >
                                        AWC
                    </div>
</div>,
                  <h4
                    className="success"
/>,
                  <h4
                    className="incorrect"
/>,
                  <form
                    autoComplete="on"
                    className="login-form"
>
                    <input
                                        autoComplete="on"
                                        className="email-si"
                                        name="email"
                                        onChange={[Function]}
                                        placeholder="Email"
                                        type="email"
                                        value=""
                    />
                    <input
                                        autoComplete="on"
                                        className="password-si"
                                        name="password"
                                        onChange={[Function]}
                                        placeholder="Password"
                                        type="password"
                                        value=""
                    />
                    <button
                                        className="login"
                                        disabled={true}
                                        onClick={[Function]}
                    >
                                        Log In
                    </button>
</form>,
                ],
                "className": "signin-form",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <h3>
                    LOGIN
</h3>,
                  <div
                    className="logo"
>
                    <div
                                        className="logocir"
                    >
                                        AWC
                    </div>
</div>,
                  <h4
                    className="success"
/>,
                  <h4
                    className="incorrect"
/>,
                  <form
                    autoComplete="on"
                    className="login-form"
>
                    <input
                                        autoComplete="on"
                                        className="email-si"
                                        name="email"
                                        onChange={[Function]}
                                        placeholder="Email"
                                        type="email"
                                        value=""
                    />
                    <input
                                        autoComplete="on"
                                        className="password-si"
                                        name="password"
                                        onChange={[Function]}
                                        placeholder="Password"
                                        type="password"
                                        value=""
                    />
                    <button
                                        className="login"
                                        disabled={true}
                                        onClick={[Function]}
                    >
                                        Log In
                    </button>
</form>,
                ],
                "className": "signin-form",
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <div
                class="signin-form"
>
                <h3>
                                LOGIN
                </h3>
                <div
                                class="logo"
                >
                                <div
                                                class="logocir"
                                >
                                                AWC
                                </div>
                </div>
                <h4
                                class="success"
                />
                <h4
                                class="incorrect"
                />
                <form
                                class="login-form"
                                autocomplete="on"
                >
                                <input
                                                name="email"
                                                type="email"
                                                autocomplete="on"
                                                placeholder="Email"
                                                class="email-si"
                                                value=""
                                />
                                <input
                                                name="password"
                                                autocomplete="on"
                                                type="password"
                                                placeholder="Password"
                                                class="password-si"
                                                value=""
                                />
                                <button
                                                disabled=""
                                                class="login"
                                >
                                                Log In
                                </button>
                </form>
</div>,
              "tag": 5,
              "type": "div",
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <div
                className="signin-form"
>
                <h3>
                                LOGIN
                </h3>
                <div
                                className="logo"
                >
                                <div
                                                className="logocir"
                                >
                                                AWC
                                </div>
                </div>
                <h4
                                className="success"
                />
                <h4
                                className="incorrect"
                />
                <form
                                autoComplete="on"
                                className="login-form"
                >
                                <input
                                                autoComplete="on"
                                                className="email-si"
                                                name="email"
                                                onChange={[Function]}
                                                placeholder="Email"
                                                type="email"
                                                value=""
                                />
                                <input
                                                autoComplete="on"
                                                className="password-si"
                                                name="password"
                                                onChange={[Function]}
                                                placeholder="Password"
                                                type="password"
                                                value=""
                                />
                                <button
                                                className="login"
                                                disabled={true}
                                                onClick={[Function]}
                                >
                                                Log In
                                </button>
                </form>
</div>,
              "className": "si-su",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <div
                className="signin-form"
>
                <h3>
                                LOGIN
                </h3>
                <div
                                className="logo"
                >
                                <div
                                                className="logocir"
                                >
                                                AWC
                                </div>
                </div>
                <h4
                                className="success"
                />
                <h4
                                className="incorrect"
                />
                <form
                                autoComplete="on"
                                className="login-form"
                >
                                <input
                                                autoComplete="on"
                                                className="email-si"
                                                name="email"
                                                onChange={[Function]}
                                                placeholder="Email"
                                                type="email"
                                                value=""
                                />
                                <input
                                                autoComplete="on"
                                                className="password-si"
                                                name="password"
                                                onChange={[Function]}
                                                placeholder="Password"
                                                type="password"
                                                value=""
                                />
                                <button
                                                className="login"
                                                disabled={true}
                                                onClick={[Function]}
                                >
                                                Log In
                                </button>
                </form>
</div>,
              "className": "si-su",
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": <div
              class="si-su"
>
              <div
                            class="signin-form"
              >
                            <h3>
                                          LOGIN
                            </h3>
                            <div
                                          class="logo"
                            >
                                          <div
                                                        class="logocir"
                                          >
                                                        AWC
                                          </div>
                            </div>
                            <h4
                                          class="success"
                            />
                            <h4
                                          class="incorrect"
                            />
                            <form
                                          class="login-form"
                                          autocomplete="on"
                            >
                                          <input
                                                        name="email"
                                                        type="email"
                                                        autocomplete="on"
                                                        placeholder="Email"
                                                        class="email-si"
                                                        value=""
                                          />
                                          <input
                                                        name="password"
                                                        autocomplete="on"
                                                        type="password"
                                                        placeholder="Password"
                                                        class="password-si"
                                                        value=""
                                          />
                                          <button
                                                        disabled=""
                                                        class="login"
                                          >
                                                        Log In
                                          </button>
                            </form>
              </div>
</div>,
            "tag": 5,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "addUser": [Function],
            "suggestedEvents": Array [
              Object {
                "name": "party",
              },
            ],
            "user": Object {
              "namename": "Steph",
            },
          },
          "memoizedState": Object {
            "email": "",
            "login": false,
            "password": "",
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "addUser": [Function],
            "suggestedEvents": Array [
              Object {
                "name": "party",
              },
            ],
            "user": Object {
              "namename": "Steph",
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "addUser": [Function],
                "suggestedEvents": Array [
                  Object {
                    "name": "party",
                  },
                ],
                "user": Object {
                  "namename": "Steph",
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="si-su"
                    >
                                        <div
                                                            class="signin-form"
                                        >
                                                            <h3>
                                                                                LOGIN
                                                            </h3>
                                                            <div
                                                                                class="logo"
                                                            >
                                                                                <div
                                                                                                    class="logocir"
                                                                                >
                                                                                                    AWC
                                                                                </div>
                                                            </div>
                                                            <h4
                                                                                class="success"
                                                            />
                                                            <h4
                                                                                class="incorrect"
                                                            />
                                                            <form
                                                                                class="login-form"
                                                                                autocomplete="on"
                                                            >
                                                                                <input
                                                                                                    name="email"
                                                                                                    type="email"
                                                                                                    autocomplete="on"
                                                                                                    placeholder="Email"
                                                                                                    class="email-si"
                                                                                                    value=""
                                                                                />
                                                                                <input
                                                                                                    name="password"
                                                                                                    autocomplete="on"
                                                                                                    type="password"
                                                                                                    placeholder="Password"
                                                                                                    class="password-si"
                                                                                                    value=""
                                                                                />
                                                                                <button
                                                                                                    disabled=""
                                                                                                    class="login"
                                                                                >
                                                                                                    Log In
                                                                                </button>
                                                            </form>
                                        </div>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "addUser": [Function],
                                                                        "suggestedEvents": Array [
                                                                          Object {
                                                                            "name": "party",
                                                                          },
                                                                        ],
                                                                        "user": Object {
                                                                          "namename": "Steph",
                                                                        },
                                                                      }
                        }
/>,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "addUser": [Function],
                                                                        "suggestedEvents": Array [
                                                                          Object {
                                                                            "name": "party",
                                                                          },
                                                                        ],
                                                                        "user": Object {
                                                                          "namename": "Steph",
                                                                        },
                                                                      }
                        }
/>,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "addUser": [Function],
                                                      "suggestedEvents": Array [
                                                        Object {
                                                          "name": "party",
                                                        },
                                                      ],
                                                      "user": Object {
                                                        "namename": "Steph",
                                                      },
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="si-su"
                  >
                                    <div
                                                      class="signin-form"
                                    >
                                                      <h3>
                                                                        LOGIN
                                                      </h3>
                                                      <div
                                                                        class="logo"
                                                      >
                                                                        <div
                                                                                          class="logocir"
                                                                        >
                                                                                          AWC
                                                                        </div>
                                                      </div>
                                                      <h4
                                                                        class="success"
                                                      />
                                                      <h4
                                                                        class="incorrect"
                                                      />
                                                      <form
                                                                        class="login-form"
                                                                        autocomplete="on"
                                                      >
                                                                        <input
                                                                                          name="email"
                                                                                          type="email"
                                                                                          autocomplete="on"
                                                                                          placeholder="Email"
                                                                                          class="email-si"
                                                                                          value=""
                                                                        />
                                                                        <input
                                                                                          name="password"
                                                                                          autocomplete="on"
                                                                                          type="password"
                                                                                          placeholder="Password"
                                                                                          class="password-si"
                                                                                          value=""
                                                                        />
                                                                        <button
                                                                                          disabled=""
                                                                                          class="login"
                                                                        >
                                                                                          Log In
                                                                        </button>
                                                      </form>
                                    </div>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "addUser": [Function],
                                                            "suggestedEvents": Array [
                                                              Object {
                                                                "name": "party",
                                                              },
                                                            ],
                                                            "user": Object {
                                                              "namename": "Steph",
                                                            },
                                                          }
                    }
/>,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "addUser": [Function],
                  "suggestedEvents": Array [
                    Object {
                      "name": "party",
                    },
                  ],
                  "user": Object {
                    "namename": "Steph",
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "addUser": [Function],
                  "suggestedEvents": Array [
                    Object {
                      "name": "party",
                    },
                  ],
                  "user": Object {
                    "namename": "Steph",
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "getToken": [Function],
        "giveAccess": [Function],
        "handleInputChange": [Function],
        "props": Object {
          "addUser": [Function],
          "suggestedEvents": Array [
            Object {
              "name": "party",
            },
          ],
          "user": Object {
            "namename": "Steph",
          },
        },
        "refs": Object {},
        "state": Object {
          "email": "",
          "login": false,
          "password": "",
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
        "userSignIn": [Function],
        "validateEmail": [Function],
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "addUser": [Function],
        "suggestedEvents": Array [
          Object {
            "name": "party",
          },
        ],
        "user": Object {
          "namename": "Steph",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="si-su"
>
          <div
                    class="signin-form"
          >
                    <h3>
                              LOGIN
                    </h3>
                    <div
                              class="logo"
                    >
                              <div
                                        class="logocir"
                              >
                                        AWC
                              </div>
                    </div>
                    <h4
                              class="success"
                    />
                    <h4
                              class="incorrect"
                    />
                    <form
                              class="login-form"
                              autocomplete="on"
                    >
                              <input
                                        name="email"
                                        type="email"
                                        autocomplete="on"
                                        placeholder="Email"
                                        class="email-si"
                                        value=""
                              />
                              <input
                                        name="password"
                                        autocomplete="on"
                                        type="password"
                                        placeholder="Password"
                                        class="password-si"
                                        value=""
                              />
                              <button
                                        disabled=""
                                        class="login"
                              >
                                        Log In
                              </button>
                    </form>
          </div>
</div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="signin-form"
>
            <h3>
                        LOGIN
            </h3>
            <div
                        className="logo"
            >
                        <div
                                    className="logocir"
                        >
                                    AWC
                        </div>
            </div>
            <h4
                        className="success"
            />
            <h4
                        className="incorrect"
            />
            <form
                        autoComplete="on"
                        className="login-form"
            >
                        <input
                                    autoComplete="on"
                                    className="email-si"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Email"
                                    type="email"
                                    value=""
                        />
                        <input
                                    autoComplete="on"
                                    className="password-si"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                        />
                        <button
                                    className="login"
                                    disabled={true}
                                    onClick={[Function]}
                        >
                                    Log In
                        </button>
            </form>
</div>,
          "className": "si-su",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <div
              class="signin-form"
>
              <h3>
                            LOGIN
              </h3>
              <div
                            class="logo"
              >
                            <div
                                          class="logocir"
                            >
                                          AWC
                            </div>
              </div>
              <h4
                            class="success"
              />
              <h4
                            class="incorrect"
              />
              <form
                            class="login-form"
                            autocomplete="on"
              >
                            <input
                                          name="email"
                                          type="email"
                                          autocomplete="on"
                                          placeholder="Email"
                                          class="email-si"
                                          value=""
                            />
                            <input
                                          name="password"
                                          autocomplete="on"
                                          type="password"
                                          placeholder="Password"
                                          class="password-si"
                                          value=""
                            />
                            <button
                                          disabled=""
                                          class="login"
                            >
                                          Log In
                            </button>
              </form>
</div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h3>
                  LOGIN
</h3>,
                <div
                  className="logo"
>
                  <div
                                    className="logocir"
                  >
                                    AWC
                  </div>
</div>,
                <h4
                  className="success"
/>,
                <h4
                  className="incorrect"
/>,
                <form
                  autoComplete="on"
                  className="login-form"
>
                  <input
                                    autoComplete="on"
                                    className="email-si"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Email"
                                    type="email"
                                    value=""
                  />
                  <input
                                    autoComplete="on"
                                    className="password-si"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                  />
                  <button
                                    className="login"
                                    disabled={true}
                                    onClick={[Function]}
                  >
                                    Log In
                  </button>
</form>,
              ],
              "className": "signin-form",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <h3>
                  LOGIN
</h3>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "LOGIN",
                },
                "ref": null,
                "rendered": Array [
                  "LOGIN",
                ],
                "type": "h3",
              },
              Object {
                "instance": <div
                  class="logo"
>
                  <div
                                    class="logocir"
                  >
                                    AWC
                  </div>
</div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="logocir"
>
                    AWC
</div>,
                  "className": "logo",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <div
                      class="logocir"
>
                      AWC
</div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "AWC",
                      "className": "logocir",
                    },
                    "ref": null,
                    "rendered": Array [
                      "AWC",
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <h4
                  class="success"
/>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "success",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "h4",
              },
              Object {
                "instance": <h4
                  class="incorrect"
/>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "incorrect",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "h4",
              },
              Object {
                "instance": <form
                  class="login-form"
                  autocomplete="on"
>
                  <input
                                    name="email"
                                    type="email"
                                    autocomplete="on"
                                    placeholder="Email"
                                    class="email-si"
                                    value=""
                  />
                  <input
                                    name="password"
                                    autocomplete="on"
                                    type="password"
                                    placeholder="Password"
                                    class="password-si"
                                    value=""
                  />
                  <button
                                    disabled=""
                                    class="login"
                  >
                                    Log In
                  </button>
</form>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "autoComplete": "on",
                  "children": Array [
                    <input
                      autoComplete="on"
                      className="email-si"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      type="email"
                      value=""
/>,
                    <input
                      autoComplete="on"
                      className="password-si"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      type="password"
                      value=""
/>,
                    <button
                      className="login"
                      disabled={true}
                      onClick={[Function]}
>
                      Log In
</button>,
                  ],
                  "className": "login-form",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <input
                      name="email"
                      type="email"
                      autocomplete="on"
                      placeholder="Email"
                      class="email-si"
                      value=""
/>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "autoComplete": "on",
                      "className": "email-si",
                      "name": "email",
                      "onChange": [Function],
                      "placeholder": "Email",
                      "type": "email",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                  Object {
                    "instance": <input
                      name="password"
                      autocomplete="on"
                      type="password"
                      placeholder="Password"
                      class="password-si"
                      value=""
/>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "autoComplete": "on",
                      "className": "password-si",
                      "name": "password",
                      "onChange": [Function],
                      "placeholder": "Password",
                      "type": "password",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                  Object {
                    "instance": <button
                      disabled=""
                      class="login"
>
                      Log In
</button>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Log In",
                      "className": "login",
                      "disabled": true,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      "Log In",
                    ],
                    "type": "button",
                  },
                ],
                "type": "form",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
