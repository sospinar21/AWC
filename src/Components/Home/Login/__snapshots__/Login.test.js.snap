// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`login matches snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    addUser={[Function]}
    suggestedEvents={
        Array [
            Object {
              "name": "party",
            },
          ]
    }
    user={
        Object {
            "namename": "Steph",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="signin"
>
        <h3>
                LOGIN
        </h3>
        <h1>
                AWC 
        </h1>
        <h4
                className="success"
        />
        <h4
                className="incorrect"
        />
        <form
                autoComplete="on"
                className="login-form"
        >
                <input
                        autoComplete="on"
                        className="email-si"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        type="email"
                        value=""
                />
                <input
                        autoComplete="on"
                        className="password-si"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        type="password"
                        value=""
                />
                <button
                        className="login"
                        disabled={true}
                        onClick={[Function]}
                >
                        Log In
                </button>
        </form>
</div>,
      "className": "si-su",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            LOGIN
</h3>,
          <h1>
            AWC 
</h1>,
          <h4
            className="success"
/>,
          <h4
            className="incorrect"
/>,
          <form
            autoComplete="on"
            className="login-form"
>
            <input
                        autoComplete="on"
                        className="email-si"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        type="email"
                        value=""
            />
            <input
                        autoComplete="on"
                        className="password-si"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        type="password"
                        value=""
            />
            <button
                        className="login"
                        disabled={true}
                        onClick={[Function]}
            >
                        Log In
            </button>
</form>,
        ],
        "className": "signin",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "LOGIN",
          },
          "ref": null,
          "rendered": "LOGIN",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "AWC ",
          },
          "ref": null,
          "rendered": "AWC ",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "success",
          },
          "ref": null,
          "rendered": null,
          "type": "h4",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "incorrect",
          },
          "ref": null,
          "rendered": null,
          "type": "h4",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "autoComplete": "on",
            "children": Array [
              <input
                autoComplete="on"
                className="email-si"
                name="email"
                onChange={[Function]}
                placeholder="Email"
                type="email"
                value=""
/>,
              <input
                autoComplete="on"
                className="password-si"
                name="password"
                onChange={[Function]}
                placeholder="Password"
                type="password"
                value=""
/>,
              <button
                className="login"
                disabled={true}
                onClick={[Function]}
>
                Log In
</button>,
            ],
            "className": "login-form",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "autoComplete": "on",
                "className": "email-si",
                "name": "email",
                "onChange": [Function],
                "placeholder": "Email",
                "type": "email",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "autoComplete": "on",
                "className": "password-si",
                "name": "password",
                "onChange": [Function],
                "placeholder": "Password",
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Log In",
                "className": "login",
                "disabled": true,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Log In",
              "type": "button",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="signin"
>
          <h3>
                    LOGIN
          </h3>
          <h1>
                    AWC 
          </h1>
          <h4
                    className="success"
          />
          <h4
                    className="incorrect"
          />
          <form
                    autoComplete="on"
                    className="login-form"
          >
                    <input
                              autoComplete="on"
                              className="email-si"
                              name="email"
                              onChange={[Function]}
                              placeholder="Email"
                              type="email"
                              value=""
                    />
                    <input
                              autoComplete="on"
                              className="password-si"
                              name="password"
                              onChange={[Function]}
                              placeholder="Password"
                              type="password"
                              value=""
                    />
                    <button
                              className="login"
                              disabled={true}
                              onClick={[Function]}
                    >
                              Log In
                    </button>
          </form>
</div>,
        "className": "si-su",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h3>
              LOGIN
</h3>,
            <h1>
              AWC 
</h1>,
            <h4
              className="success"
/>,
            <h4
              className="incorrect"
/>,
            <form
              autoComplete="on"
              className="login-form"
>
              <input
                            autoComplete="on"
                            className="email-si"
                            name="email"
                            onChange={[Function]}
                            placeholder="Email"
                            type="email"
                            value=""
              />
              <input
                            autoComplete="on"
                            className="password-si"
                            name="password"
                            onChange={[Function]}
                            placeholder="Password"
                            type="password"
                            value=""
              />
              <button
                            className="login"
                            disabled={true}
                            onClick={[Function]}
              >
                            Log In
              </button>
</form>,
          ],
          "className": "signin",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "LOGIN",
            },
            "ref": null,
            "rendered": "LOGIN",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "AWC ",
            },
            "ref": null,
            "rendered": "AWC ",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "success",
            },
            "ref": null,
            "rendered": null,
            "type": "h4",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "incorrect",
            },
            "ref": null,
            "rendered": null,
            "type": "h4",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "autoComplete": "on",
              "children": Array [
                <input
                  autoComplete="on"
                  className="email-si"
                  name="email"
                  onChange={[Function]}
                  placeholder="Email"
                  type="email"
                  value=""
/>,
                <input
                  autoComplete="on"
                  className="password-si"
                  name="password"
                  onChange={[Function]}
                  placeholder="Password"
                  type="password"
                  value=""
/>,
                <button
                  className="login"
                  disabled={true}
                  onClick={[Function]}
>
                  Log In
</button>,
              ],
              "className": "login-form",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "autoComplete": "on",
                  "className": "email-si",
                  "name": "email",
                  "onChange": [Function],
                  "placeholder": "Email",
                  "type": "email",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "autoComplete": "on",
                  "className": "password-si",
                  "name": "password",
                  "onChange": [Function],
                  "placeholder": "Password",
                  "type": "password",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Log In",
                  "className": "login",
                  "disabled": true,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Log In",
                "type": "button",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
